#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define V 13

struct Queue{
	int n;
	int size;
	int front;
	int back;
	int* arr;
};

typedef struct Queue queue;

queue* createQueue(int x){
	queue* temp=(queue*)malloc(sizeof(queue));
	temp->n=x;
	temp->front=0;
	temp->back=temp->n-1;
	temp->size=0;
	temp->arr=(int*)malloc(temp->n*sizeof(int));
	memset(temp->arr,0,temp->n);
	return temp;
}

int isFull(queue* q){
	if(q->n==q->size)
		return 1;
	return 0;	
}

int isEmpty(queue* q){
	if(q->size==0)
		return 1;
	return 0;	
}

void push(queue* q, int a){
	if(!isFull(q)){
		q->back=(q->back+1)%q->n;
		q->arr[q->back]=a;
		q->size++;
	}
	else{
		printf("Can't push\n");
	}
}

int pop(queue* q){
	if(!isEmpty(q)){
		int x=q->arr[q->front];
		q->front=(q->front+1)%q->n;
		q->size--;
		return x;
	}
	else{
		printf("Can't pop\n");
		return -1;
	}
}

void notReachableUtil(int graph[][V], int source, int ttl, int* visit, queue* q){
	int i=0;
	if(ttl<=0){
		return;
	}
	
	// int popvertex;
	// while(isEmpty(q)!=1){
	// 	popvertex=pop(q);
	// 	int i=0;
	// 	for(i=0;i<V;i++){
	// 		if(graph[popvertex][i]==1 && visit[i]!=1 && ttl>0){
	// 			visit[i]=1;
	// 			push(q,i);
	// 			notReachableUtil(graph,i,ttl-1,visit,q);
	// 		}
	// 	}
	// }
		printf("Source is %d\n", source);
		
		for(i=0;i<V;i++){
			if(graph[source][i]==1 && visit[i]!=1 && ttl>0){
				printf("Child is %d\n", i);
				visit[i]=1;
				notReachableUtil(graph,i,ttl-1,visit,q);
			}
		}
	return;
}


int notReachable(int graph[][V], int source, int ttl){
	queue* q=createQueue(V);
	int* visit=(int*)malloc(V*sizeof(int));
	memset(visit,0,V);
	visit[source]=1;
	push(q,source);
	
	notReachableUtil(graph,source,ttl,visit,q);
	
	int count=0;
	for(int i=0;i<V;i++){
		printf("%d,",visit[i]);
		if(visit[i]==0)
			count++;
	}
	
	return count;
}

int main(void) {
	// your code goes here
	//int V=13;
	
	//int i=0;
	//int j=0;
	int graph[V][V]={0};
	graph[0][1]=graph[0][4]=graph[1][0]=graph[1][2]=graph[1][5]=1;
	graph[2][1]=graph[2][3]=graph[2][6]=graph[3][2]=graph[3][7]=1;
	graph[4][0]=graph[4][8]=graph[5][1]=graph[5][6]=graph[5][10]=1;
	graph[6][2]=graph[6][5]=graph[6][11]=graph[7][3]=graph[7][12]=1;
	graph[8][4]=graph[8][9]=graph[9][8]=graph[9][10]=graph[10][5]=graph[10][9]=graph[10][11]=1;
	graph[11][6]=graph[11][10]=graph[11][12]=graph[12][7]=graph[12][11]=1;
	
	
	
	int source=5;
	int ttl=3;
	
	// queue* q=createQueue(V);
	// push(q,1);
	// push(q,2);
	// push(q,3);
	// pop(q);
	// push(q,4);
	//printf("%d\n", q->arr[q->front]);
	//printf("%d\n", q->arr[q->back]);
	// for(i=q->front;i<q->n;i++){
	// 	printf("%d,",q->arr[i]);
	// }
	
	
	
	int x=notReachable(graph,source,ttl);
	printf("%d\n", x);
	
	
	return 0;
}
